// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: jon_shared_data_day_cam_glass_heater.proto

package day_cam_glass_heater

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type JonGuiDataDayCamGlassHeater struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Temperature   float64                `protobuf:"fixed64,1,opt,name=temperature,proto3" json:"temperature,omitempty"`
	Status        bool                   `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JonGuiDataDayCamGlassHeater) Reset() {
	*x = JonGuiDataDayCamGlassHeater{}
	mi := &file_jon_shared_data_day_cam_glass_heater_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JonGuiDataDayCamGlassHeater) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JonGuiDataDayCamGlassHeater) ProtoMessage() {}

func (x *JonGuiDataDayCamGlassHeater) ProtoReflect() protoreflect.Message {
	mi := &file_jon_shared_data_day_cam_glass_heater_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JonGuiDataDayCamGlassHeater.ProtoReflect.Descriptor instead.
func (*JonGuiDataDayCamGlassHeater) Descriptor() ([]byte, []int) {
	return file_jon_shared_data_day_cam_glass_heater_proto_rawDescGZIP(), []int{0}
}

func (x *JonGuiDataDayCamGlassHeater) GetTemperature() float64 {
	if x != nil {
		return x.Temperature
	}
	return 0
}

func (x *JonGuiDataDayCamGlassHeater) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

var File_jon_shared_data_day_cam_glass_heater_proto protoreflect.FileDescriptor

const file_jon_shared_data_day_cam_glass_heater_proto_rawDesc = "" +
	"\n" +
	"*jon_shared_data_day_cam_glass_heater.proto\x12\x03ser\x1a\x1bbuf/validate/validate.proto\"\x94\x01\n" +
	"\x1bJonGuiDataDayCamGlassHeater\x12]\n" +
	"\vtemperature\x18\x01 \x01(\x01B;\xbaH8\x126I\x00\x00\x00\x00\x00\x004\xc0I\x00\x00\x00\x00\x00\x00\x00\x00I\x00\x00\x00\x00\x00\x009@I\x00\x00\x00\x00\x00\x00Y@\x19\xc3\xf5(\\\x8f\xa2\x84@)fffff\x12q\xc0R\vtemperature\x12\x16\n" +
	"\x06status\x18\x02 \x01(\bR\x06statusB\xb6\x01\n" +
	"\acom.serB#JonSharedDataDayCamGlassHeaterProtoP\x01ZZgit-codecommit.eu-central-1.amazonaws.com/v1/repos/jettison/jonp/data/day_cam_glass_heater\xa2\x02\x03SXX\xaa\x02\x03Ser\xca\x02\x03Ser\xe2\x02\x0fSer\\GPBMetadata\xea\x02\x03Serb\x06proto3"

var (
	file_jon_shared_data_day_cam_glass_heater_proto_rawDescOnce sync.Once
	file_jon_shared_data_day_cam_glass_heater_proto_rawDescData []byte
)

func file_jon_shared_data_day_cam_glass_heater_proto_rawDescGZIP() []byte {
	file_jon_shared_data_day_cam_glass_heater_proto_rawDescOnce.Do(func() {
		file_jon_shared_data_day_cam_glass_heater_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_jon_shared_data_day_cam_glass_heater_proto_rawDesc), len(file_jon_shared_data_day_cam_glass_heater_proto_rawDesc)))
	})
	return file_jon_shared_data_day_cam_glass_heater_proto_rawDescData
}

var file_jon_shared_data_day_cam_glass_heater_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_jon_shared_data_day_cam_glass_heater_proto_goTypes = []any{
	(*JonGuiDataDayCamGlassHeater)(nil), // 0: ser.JonGuiDataDayCamGlassHeater
}
var file_jon_shared_data_day_cam_glass_heater_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_jon_shared_data_day_cam_glass_heater_proto_init() }
func file_jon_shared_data_day_cam_glass_heater_proto_init() {
	if File_jon_shared_data_day_cam_glass_heater_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_jon_shared_data_day_cam_glass_heater_proto_rawDesc), len(file_jon_shared_data_day_cam_glass_heater_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_jon_shared_data_day_cam_glass_heater_proto_goTypes,
		DependencyIndexes: file_jon_shared_data_day_cam_glass_heater_proto_depIdxs,
		MessageInfos:      file_jon_shared_data_day_cam_glass_heater_proto_msgTypes,
	}.Build()
	File_jon_shared_data_day_cam_glass_heater_proto = out.File
	file_jon_shared_data_day_cam_glass_heater_proto_goTypes = nil
	file_jon_shared_data_day_cam_glass_heater_proto_depIdxs = nil
}
