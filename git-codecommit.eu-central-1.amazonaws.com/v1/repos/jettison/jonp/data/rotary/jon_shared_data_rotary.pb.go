// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: jon_shared_data_rotary.proto

package rotary

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	types "git-codecommit.eu-central-1.amazonaws.com/v1/repos/jettison/jonp/types"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type JonGuiDataRotary struct {
	state              protoimpl.MessageState     `protogen:"open.v1"`
	Azimuth            float64                    `protobuf:"fixed64,1,opt,name=azimuth,proto3" json:"azimuth,omitempty"`
	AzimuthSpeed       float64                    `protobuf:"fixed64,2,opt,name=azimuth_speed,json=azimuthSpeed,proto3" json:"azimuth_speed,omitempty"`
	Elevation          float64                    `protobuf:"fixed64,3,opt,name=elevation,proto3" json:"elevation,omitempty"`
	ElevationSpeed     float64                    `protobuf:"fixed64,4,opt,name=elevation_speed,json=elevationSpeed,proto3" json:"elevation_speed,omitempty"`
	PlatformAzimuth    float64                    `protobuf:"fixed64,5,opt,name=platform_azimuth,json=platformAzimuth,proto3" json:"platform_azimuth,omitempty"`
	PlatformElevation  float64                    `protobuf:"fixed64,6,opt,name=platform_elevation,json=platformElevation,proto3" json:"platform_elevation,omitempty"`
	PlatformBank       float64                    `protobuf:"fixed64,7,opt,name=platform_bank,json=platformBank,proto3" json:"platform_bank,omitempty"`
	IsMoving           bool                       `protobuf:"varint,8,opt,name=is_moving,json=isMoving,proto3" json:"is_moving,omitempty"`
	Mode               types.JonGuiDataRotaryMode `protobuf:"varint,9,opt,name=mode,proto3,enum=ser.JonGuiDataRotaryMode" json:"mode,omitempty"`
	IsScanning         bool                       `protobuf:"varint,10,opt,name=is_scanning,json=isScanning,proto3" json:"is_scanning,omitempty"`
	IsScanningPaused   bool                       `protobuf:"varint,11,opt,name=is_scanning_paused,json=isScanningPaused,proto3" json:"is_scanning_paused,omitempty"`
	UseRotaryAsCompass bool                       `protobuf:"varint,12,opt,name=use_rotary_as_compass,json=useRotaryAsCompass,proto3" json:"use_rotary_as_compass,omitempty"`
	ScanTarget         int32                      `protobuf:"varint,13,opt,name=scan_target,json=scanTarget,proto3" json:"scan_target,omitempty"`
	ScanTargetMax      int32                      `protobuf:"varint,14,opt,name=scan_target_max,json=scanTargetMax,proto3" json:"scan_target_max,omitempty"`
	SunAzimuth         float64                    `protobuf:"fixed64,15,opt,name=sun_azimuth,json=sunAzimuth,proto3" json:"sun_azimuth,omitempty"`
	SunElevation       float64                    `protobuf:"fixed64,16,opt,name=sun_elevation,json=sunElevation,proto3" json:"sun_elevation,omitempty"`
	CurrentScanNode    *ScanNode                  `protobuf:"bytes,17,opt,name=current_scan_node,json=currentScanNode,proto3" json:"current_scan_node,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *JonGuiDataRotary) Reset() {
	*x = JonGuiDataRotary{}
	mi := &file_jon_shared_data_rotary_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JonGuiDataRotary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JonGuiDataRotary) ProtoMessage() {}

func (x *JonGuiDataRotary) ProtoReflect() protoreflect.Message {
	mi := &file_jon_shared_data_rotary_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JonGuiDataRotary.ProtoReflect.Descriptor instead.
func (*JonGuiDataRotary) Descriptor() ([]byte, []int) {
	return file_jon_shared_data_rotary_proto_rawDescGZIP(), []int{0}
}

func (x *JonGuiDataRotary) GetAzimuth() float64 {
	if x != nil {
		return x.Azimuth
	}
	return 0
}

func (x *JonGuiDataRotary) GetAzimuthSpeed() float64 {
	if x != nil {
		return x.AzimuthSpeed
	}
	return 0
}

func (x *JonGuiDataRotary) GetElevation() float64 {
	if x != nil {
		return x.Elevation
	}
	return 0
}

func (x *JonGuiDataRotary) GetElevationSpeed() float64 {
	if x != nil {
		return x.ElevationSpeed
	}
	return 0
}

func (x *JonGuiDataRotary) GetPlatformAzimuth() float64 {
	if x != nil {
		return x.PlatformAzimuth
	}
	return 0
}

func (x *JonGuiDataRotary) GetPlatformElevation() float64 {
	if x != nil {
		return x.PlatformElevation
	}
	return 0
}

func (x *JonGuiDataRotary) GetPlatformBank() float64 {
	if x != nil {
		return x.PlatformBank
	}
	return 0
}

func (x *JonGuiDataRotary) GetIsMoving() bool {
	if x != nil {
		return x.IsMoving
	}
	return false
}

func (x *JonGuiDataRotary) GetMode() types.JonGuiDataRotaryMode {
	if x != nil {
		return x.Mode
	}
	return types.JonGuiDataRotaryMode(0)
}

func (x *JonGuiDataRotary) GetIsScanning() bool {
	if x != nil {
		return x.IsScanning
	}
	return false
}

func (x *JonGuiDataRotary) GetIsScanningPaused() bool {
	if x != nil {
		return x.IsScanningPaused
	}
	return false
}

func (x *JonGuiDataRotary) GetUseRotaryAsCompass() bool {
	if x != nil {
		return x.UseRotaryAsCompass
	}
	return false
}

func (x *JonGuiDataRotary) GetScanTarget() int32 {
	if x != nil {
		return x.ScanTarget
	}
	return 0
}

func (x *JonGuiDataRotary) GetScanTargetMax() int32 {
	if x != nil {
		return x.ScanTargetMax
	}
	return 0
}

func (x *JonGuiDataRotary) GetSunAzimuth() float64 {
	if x != nil {
		return x.SunAzimuth
	}
	return 0
}

func (x *JonGuiDataRotary) GetSunElevation() float64 {
	if x != nil {
		return x.SunElevation
	}
	return 0
}

func (x *JonGuiDataRotary) GetCurrentScanNode() *ScanNode {
	if x != nil {
		return x.CurrentScanNode
	}
	return nil
}

type ScanNode struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Index              int32                  `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	DayZoomTableValue  int32                  `protobuf:"varint,2,opt,name=DayZoomTableValue,proto3" json:"DayZoomTableValue,omitempty"`
	HeatZoomTableValue int32                  `protobuf:"varint,3,opt,name=HeatZoomTableValue,proto3" json:"HeatZoomTableValue,omitempty"`
	Azimuth            float64                `protobuf:"fixed64,4,opt,name=azimuth,proto3" json:"azimuth,omitempty"`
	Elevation          float64                `protobuf:"fixed64,5,opt,name=elevation,proto3" json:"elevation,omitempty"`
	Linger             float64                `protobuf:"fixed64,6,opt,name=linger,proto3" json:"linger,omitempty"`
	Speed              float64                `protobuf:"fixed64,7,opt,name=speed,proto3" json:"speed,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ScanNode) Reset() {
	*x = ScanNode{}
	mi := &file_jon_shared_data_rotary_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScanNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScanNode) ProtoMessage() {}

func (x *ScanNode) ProtoReflect() protoreflect.Message {
	mi := &file_jon_shared_data_rotary_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScanNode.ProtoReflect.Descriptor instead.
func (*ScanNode) Descriptor() ([]byte, []int) {
	return file_jon_shared_data_rotary_proto_rawDescGZIP(), []int{1}
}

func (x *ScanNode) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *ScanNode) GetDayZoomTableValue() int32 {
	if x != nil {
		return x.DayZoomTableValue
	}
	return 0
}

func (x *ScanNode) GetHeatZoomTableValue() int32 {
	if x != nil {
		return x.HeatZoomTableValue
	}
	return 0
}

func (x *ScanNode) GetAzimuth() float64 {
	if x != nil {
		return x.Azimuth
	}
	return 0
}

func (x *ScanNode) GetElevation() float64 {
	if x != nil {
		return x.Elevation
	}
	return 0
}

func (x *ScanNode) GetLinger() float64 {
	if x != nil {
		return x.Linger
	}
	return 0
}

func (x *ScanNode) GetSpeed() float64 {
	if x != nil {
		return x.Speed
	}
	return 0
}

var File_jon_shared_data_rotary_proto protoreflect.FileDescriptor

const file_jon_shared_data_rotary_proto_rawDesc = "" +
	"\n" +
	"\x1cjon_shared_data_rotary.proto\x12\x03ser\x1a\x1bbuf/validate/validate.proto\x1a\x1bjon_shared_data_types.proto\"\xfd\t\n" +
	"\x10JonGuiDataRotary\x12U\n" +
	"\aazimuth\x18\x01 \x01(\x01B;\xbaH8\x126I\x00\x00\x00\x00\x00\x00\x00\x00I\x00\x00\x00\x00\x00\x80V@I\x00\x00\x00\x00\x00\x80f@I\x00\x00\x00\x00\x00\xe0p@\x11\x00\x00\x00\x00\x00\x80v@)\x00\x00\x00\x00\x00\x00\x00\x00R\aazimuth\x12i\n" +
	"\razimuth_speed\x18\x02 \x01(\x01BD\xbaHA\x12?I\x00\x00\x00\x00\x00\x00\xf0\xbfI\x00\x00\x00\x00\x00\x00\xe0\xbfI\x00\x00\x00\x00\x00\x00\x00\x00I\x00\x00\x00\x00\x00\x00\xe0?I\x00\x00\x00\x00\x00\x00\xf0?\x19\x00\x00\x00\x00\x00\x00\xf0?)\x00\x00\x00\x00\x00\x00\xf0\xbfR\fazimuthSpeed\x12P\n" +
	"\televation\x18\x03 \x01(\x01B2\xbaH/\x12-I\x00\x00\x00\x00\x00\x80F\xc0I\x00\x00\x00\x00\x00\x00\x00\x00I\x00\x00\x00\x00\x00\x80F@\x19\x00\x00\x00\x00\x00\x80V@)\x00\x00\x00\x00\x00\x80V\xc0R\televation\x12m\n" +
	"\x0felevation_speed\x18\x04 \x01(\x01BD\xbaHA\x12?I\x00\x00\x00\x00\x00\x00\xf0\xbfI\x00\x00\x00\x00\x00\x00\xe0\xbfI\x00\x00\x00\x00\x00\x00\x00\x00I\x00\x00\x00\x00\x00\x00\xe0?I\x00\x00\x00\x00\x00\x00\xf0?\x19\x00\x00\x00\x00\x00\x00\xf0?)\x00\x00\x00\x00\x00\x00\xf0\xbfR\x0eelevationSpeed\x12f\n" +
	"\x10platform_azimuth\x18\x05 \x01(\x01B;\xbaH8\x126I\x00\x00\x00\x00\x00\x00\x00\x00I\x00\x00\x00\x00\x00\x80V@I\x00\x00\x00\x00\x00\x80f@I\x00\x00\x00\x00\x00\xe0p@\x11\x00\x00\x00\x00\x00\x80v@)\x00\x00\x00\x00\x00\x00\x00\x00R\x0fplatformAzimuth\x12a\n" +
	"\x12platform_elevation\x18\x06 \x01(\x01B2\xbaH/\x12-I\x00\x00\x00\x00\x00\x80F\xc0I\x00\x00\x00\x00\x00\x00\x00\x00I\x00\x00\x00\x00\x00\x80F@\x19\x00\x00\x00\x00\x00\x80V@)\x00\x00\x00\x00\x00\x80V\xc0R\x11platformElevation\x12W\n" +
	"\rplatform_bank\x18\a \x01(\x01B2\xbaH/\x12-I\x00\x00\x00\x00\x00\x80V\xc0I\x00\x00\x00\x00\x00\x00\x00\x00I\x00\x00\x00\x00\x00\x80V@\x11\x00\x00\x00\x00\x00\x80f@)\x00\x00\x00\x00\x00\x80f\xc0R\fplatformBank\x12\x1b\n" +
	"\tis_moving\x18\b \x01(\bR\bisMoving\x129\n" +
	"\x04mode\x18\t \x01(\x0e2\x19.ser.JonGuiDataRotaryModeB\n" +
	"\xbaH\a\x82\x01\x04\x10\x01 \x00R\x04mode\x12\x1f\n" +
	"\vis_scanning\x18\n" +
	" \x01(\bR\n" +
	"isScanning\x12,\n" +
	"\x12is_scanning_paused\x18\v \x01(\bR\x10isScanningPaused\x121\n" +
	"\x15use_rotary_as_compass\x18\f \x01(\bR\x12useRotaryAsCompass\x12.\n" +
	"\vscan_target\x18\r \x01(\x05B\r\xbaH\n" +
	"\x1a\b@\x01@\x02@\x03(\x00R\n" +
	"scanTarget\x125\n" +
	"\x0fscan_target_max\x18\x0e \x01(\x05B\r\xbaH\n" +
	"\x1a\b@\x01@\x02@\x03(\x00R\rscanTargetMax\x12\\\n" +
	"\vsun_azimuth\x18\x0f \x01(\x01B;\xbaH8\x126I\x00\x00\x00\x00\x00\x00\x00\x00I\x00\x00\x00\x00\x00\x80V@I\x00\x00\x00\x00\x00\x80f@I\x00\x00\x00\x00\x00\xe0p@\x11\x00\x00\x00\x00\x00\x80v@)\x00\x00\x00\x00\x00\x00\x00\x00R\n" +
	"sunAzimuth\x12`\n" +
	"\rsun_elevation\x18\x10 \x01(\x01B;\xbaH8\x126I\x00\x00\x00\x00\x00\x00\x00\x00I\x00\x00\x00\x00\x00\x80V@I\x00\x00\x00\x00\x00\x80f@I\x00\x00\x00\x00\x00\xe0p@\x11\x00\x00\x00\x00\x00\x80v@)\x00\x00\x00\x00\x00\x00\x00\x00R\fsunElevation\x12A\n" +
	"\x11current_scan_node\x18\x11 \x01(\v2\r.ser.ScanNodeB\x06\xbaH\x03\xc8\x01\x01R\x0fcurrentScanNode\"\xda\x02\n" +
	"\bScanNode\x12\x1d\n" +
	"\x05index\x18\x01 \x01(\x05B\a\xbaH\x04\x1a\x02(\x00R\x05index\x125\n" +
	"\x11DayZoomTableValue\x18\x02 \x01(\x05B\a\xbaH\x04\x1a\x02(\x00R\x11DayZoomTableValue\x127\n" +
	"\x12HeatZoomTableValue\x18\x03 \x01(\x05B\a\xbaH\x04\x1a\x02(\x00R\x12HeatZoomTableValue\x121\n" +
	"\aazimuth\x18\x04 \x01(\x01B\x17\xbaH\x14\x12\x12\x11\x00\x00\x00\x00\x00\x80v@)\x00\x00\x00\x00\x00\x00\x00\x00R\aazimuth\x125\n" +
	"\televation\x18\x05 \x01(\x01B\x17\xbaH\x14\x12\x12\x19\x00\x00\x00\x00\x00\x80V@)\x00\x00\x00\x00\x00\x80V\xc0R\televation\x12&\n" +
	"\x06linger\x18\x06 \x01(\x01B\x0e\xbaH\v\x12\t)\x00\x00\x00\x00\x00\x00\x00\x00R\x06linger\x12-\n" +
	"\x05speed\x18\a \x01(\x01B\x17\xbaH\x14\x12\x12\x19\x00\x00\x00\x00\x00\x00\xf0?!\x00\x00\x00\x00\x00\x00\x00\x00R\x05speedB\x9d\x01\n" +
	"\acom.serB\x18JonSharedDataRotaryProtoP\x01ZLgit-codecommit.eu-central-1.amazonaws.com/v1/repos/jettison/jonp/data/rotary\xa2\x02\x03SXX\xaa\x02\x03Ser\xca\x02\x03Ser\xe2\x02\x0fSer\\GPBMetadata\xea\x02\x03Serb\x06proto3"

var (
	file_jon_shared_data_rotary_proto_rawDescOnce sync.Once
	file_jon_shared_data_rotary_proto_rawDescData []byte
)

func file_jon_shared_data_rotary_proto_rawDescGZIP() []byte {
	file_jon_shared_data_rotary_proto_rawDescOnce.Do(func() {
		file_jon_shared_data_rotary_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_jon_shared_data_rotary_proto_rawDesc), len(file_jon_shared_data_rotary_proto_rawDesc)))
	})
	return file_jon_shared_data_rotary_proto_rawDescData
}

var file_jon_shared_data_rotary_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_jon_shared_data_rotary_proto_goTypes = []any{
	(*JonGuiDataRotary)(nil),        // 0: ser.JonGuiDataRotary
	(*ScanNode)(nil),                // 1: ser.ScanNode
	(types.JonGuiDataRotaryMode)(0), // 2: ser.JonGuiDataRotaryMode
}
var file_jon_shared_data_rotary_proto_depIdxs = []int32{
	2, // 0: ser.JonGuiDataRotary.mode:type_name -> ser.JonGuiDataRotaryMode
	1, // 1: ser.JonGuiDataRotary.current_scan_node:type_name -> ser.ScanNode
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_jon_shared_data_rotary_proto_init() }
func file_jon_shared_data_rotary_proto_init() {
	if File_jon_shared_data_rotary_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_jon_shared_data_rotary_proto_rawDesc), len(file_jon_shared_data_rotary_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_jon_shared_data_rotary_proto_goTypes,
		DependencyIndexes: file_jon_shared_data_rotary_proto_depIdxs,
		MessageInfos:      file_jon_shared_data_rotary_proto_msgTypes,
	}.Build()
	File_jon_shared_data_rotary_proto = out.File
	file_jon_shared_data_rotary_proto_goTypes = nil
	file_jon_shared_data_rotary_proto_depIdxs = nil
}
