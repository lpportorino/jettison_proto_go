// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: jon_shared_cmd.proto

package cmd

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	compass "git-codecommit.eu-central-1.amazonaws.com/v1/repos/jettison/jonp/cmd/compass"
	cv "git-codecommit.eu-central-1.amazonaws.com/v1/repos/jettison/jonp/cmd/cv"
	day_cam_glass_heater "git-codecommit.eu-central-1.amazonaws.com/v1/repos/jettison/jonp/cmd/day_cam_glass_heater"
	day_camera "git-codecommit.eu-central-1.amazonaws.com/v1/repos/jettison/jonp/cmd/day_camera"
	gps "git-codecommit.eu-central-1.amazonaws.com/v1/repos/jettison/jonp/cmd/gps"
	heat_camera "git-codecommit.eu-central-1.amazonaws.com/v1/repos/jettison/jonp/cmd/heat_camera"
	lira "git-codecommit.eu-central-1.amazonaws.com/v1/repos/jettison/jonp/cmd/lira"
	lrf "git-codecommit.eu-central-1.amazonaws.com/v1/repos/jettison/jonp/cmd/lrf"
	lrf_align "git-codecommit.eu-central-1.amazonaws.com/v1/repos/jettison/jonp/cmd/lrf_align"
	osd "git-codecommit.eu-central-1.amazonaws.com/v1/repos/jettison/jonp/cmd/osd"
	rotary "git-codecommit.eu-central-1.amazonaws.com/v1/repos/jettison/jonp/cmd/rotary"
	system "git-codecommit.eu-central-1.amazonaws.com/v1/repos/jettison/jonp/cmd/system"
	types "git-codecommit.eu-central-1.amazonaws.com/v1/repos/jettison/jonp/types"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Root struct {
	state           protoimpl.MessageState     `protogen:"open.v1"`
	ProtocolVersion uint32                     `protobuf:"varint,1,opt,name=protocol_version,json=protocolVersion,proto3" json:"protocol_version,omitempty"`
	SessionId       uint32                     `protobuf:"varint,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Important       bool                       `protobuf:"varint,3,opt,name=important,proto3" json:"important,omitempty"`
	FromCvSubsystem bool                       `protobuf:"varint,4,opt,name=from_cv_subsystem,json=fromCvSubsystem,proto3" json:"from_cv_subsystem,omitempty"`
	ClientType      types.JonGuiDataClientType `protobuf:"varint,5,opt,name=client_type,json=clientType,proto3,enum=ser.JonGuiDataClientType" json:"client_type,omitempty"`
	// Types that are valid to be assigned to Payload:
	//
	//	*Root_DayCamera
	//	*Root_HeatCamera
	//	*Root_Gps
	//	*Root_Compass
	//	*Root_Lrf
	//	*Root_LrfCalib
	//	*Root_Rotary
	//	*Root_Osd
	//	*Root_Ping
	//	*Root_Noop
	//	*Root_Frozen
	//	*Root_System
	//	*Root_Cv
	//	*Root_DayCamGlassHeater
	//	*Root_Lira
	Payload       isRoot_Payload `protobuf_oneof:"payload"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Root) Reset() {
	*x = Root{}
	mi := &file_jon_shared_cmd_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Root) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Root) ProtoMessage() {}

func (x *Root) ProtoReflect() protoreflect.Message {
	mi := &file_jon_shared_cmd_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Root.ProtoReflect.Descriptor instead.
func (*Root) Descriptor() ([]byte, []int) {
	return file_jon_shared_cmd_proto_rawDescGZIP(), []int{0}
}

func (x *Root) GetProtocolVersion() uint32 {
	if x != nil {
		return x.ProtocolVersion
	}
	return 0
}

func (x *Root) GetSessionId() uint32 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *Root) GetImportant() bool {
	if x != nil {
		return x.Important
	}
	return false
}

func (x *Root) GetFromCvSubsystem() bool {
	if x != nil {
		return x.FromCvSubsystem
	}
	return false
}

func (x *Root) GetClientType() types.JonGuiDataClientType {
	if x != nil {
		return x.ClientType
	}
	return types.JonGuiDataClientType(0)
}

func (x *Root) GetPayload() isRoot_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *Root) GetDayCamera() *day_camera.Root {
	if x != nil {
		if x, ok := x.Payload.(*Root_DayCamera); ok {
			return x.DayCamera
		}
	}
	return nil
}

func (x *Root) GetHeatCamera() *heat_camera.Root {
	if x != nil {
		if x, ok := x.Payload.(*Root_HeatCamera); ok {
			return x.HeatCamera
		}
	}
	return nil
}

func (x *Root) GetGps() *gps.Root {
	if x != nil {
		if x, ok := x.Payload.(*Root_Gps); ok {
			return x.Gps
		}
	}
	return nil
}

func (x *Root) GetCompass() *compass.Root {
	if x != nil {
		if x, ok := x.Payload.(*Root_Compass); ok {
			return x.Compass
		}
	}
	return nil
}

func (x *Root) GetLrf() *lrf.Root {
	if x != nil {
		if x, ok := x.Payload.(*Root_Lrf); ok {
			return x.Lrf
		}
	}
	return nil
}

func (x *Root) GetLrfCalib() *lrf_align.Root {
	if x != nil {
		if x, ok := x.Payload.(*Root_LrfCalib); ok {
			return x.LrfCalib
		}
	}
	return nil
}

func (x *Root) GetRotary() *rotary.Root {
	if x != nil {
		if x, ok := x.Payload.(*Root_Rotary); ok {
			return x.Rotary
		}
	}
	return nil
}

func (x *Root) GetOsd() *osd.Root {
	if x != nil {
		if x, ok := x.Payload.(*Root_Osd); ok {
			return x.Osd
		}
	}
	return nil
}

func (x *Root) GetPing() *Ping {
	if x != nil {
		if x, ok := x.Payload.(*Root_Ping); ok {
			return x.Ping
		}
	}
	return nil
}

func (x *Root) GetNoop() *Noop {
	if x != nil {
		if x, ok := x.Payload.(*Root_Noop); ok {
			return x.Noop
		}
	}
	return nil
}

func (x *Root) GetFrozen() *Frozen {
	if x != nil {
		if x, ok := x.Payload.(*Root_Frozen); ok {
			return x.Frozen
		}
	}
	return nil
}

func (x *Root) GetSystem() *system.Root {
	if x != nil {
		if x, ok := x.Payload.(*Root_System); ok {
			return x.System
		}
	}
	return nil
}

func (x *Root) GetCv() *cv.Root {
	if x != nil {
		if x, ok := x.Payload.(*Root_Cv); ok {
			return x.Cv
		}
	}
	return nil
}

func (x *Root) GetDayCamGlassHeater() *day_cam_glass_heater.Root {
	if x != nil {
		if x, ok := x.Payload.(*Root_DayCamGlassHeater); ok {
			return x.DayCamGlassHeater
		}
	}
	return nil
}

func (x *Root) GetLira() *lira.Root {
	if x != nil {
		if x, ok := x.Payload.(*Root_Lira); ok {
			return x.Lira
		}
	}
	return nil
}

type isRoot_Payload interface {
	isRoot_Payload()
}

type Root_DayCamera struct {
	DayCamera *day_camera.Root `protobuf:"bytes,20,opt,name=day_camera,json=dayCamera,proto3,oneof"`
}

type Root_HeatCamera struct {
	HeatCamera *heat_camera.Root `protobuf:"bytes,21,opt,name=heat_camera,json=heatCamera,proto3,oneof"`
}

type Root_Gps struct {
	Gps *gps.Root `protobuf:"bytes,22,opt,name=gps,proto3,oneof"`
}

type Root_Compass struct {
	Compass *compass.Root `protobuf:"bytes,23,opt,name=compass,proto3,oneof"`
}

type Root_Lrf struct {
	Lrf *lrf.Root `protobuf:"bytes,24,opt,name=lrf,proto3,oneof"`
}

type Root_LrfCalib struct {
	LrfCalib *lrf_align.Root `protobuf:"bytes,25,opt,name=lrf_calib,json=lrfCalib,proto3,oneof"`
}

type Root_Rotary struct {
	Rotary *rotary.Root `protobuf:"bytes,26,opt,name=rotary,proto3,oneof"`
}

type Root_Osd struct {
	Osd *osd.Root `protobuf:"bytes,27,opt,name=osd,proto3,oneof"`
}

type Root_Ping struct {
	Ping *Ping `protobuf:"bytes,28,opt,name=ping,proto3,oneof"`
}

type Root_Noop struct {
	Noop *Noop `protobuf:"bytes,29,opt,name=noop,proto3,oneof"`
}

type Root_Frozen struct {
	Frozen *Frozen `protobuf:"bytes,30,opt,name=frozen,proto3,oneof"`
}

type Root_System struct {
	System *system.Root `protobuf:"bytes,31,opt,name=system,proto3,oneof"`
}

type Root_Cv struct {
	Cv *cv.Root `protobuf:"bytes,32,opt,name=cv,proto3,oneof"`
}

type Root_DayCamGlassHeater struct {
	DayCamGlassHeater *day_cam_glass_heater.Root `protobuf:"bytes,33,opt,name=day_cam_glass_heater,json=dayCamGlassHeater,proto3,oneof"`
}

type Root_Lira struct {
	Lira *lira.Root `protobuf:"bytes,34,opt,name=lira,proto3,oneof"`
}

func (*Root_DayCamera) isRoot_Payload() {}

func (*Root_HeatCamera) isRoot_Payload() {}

func (*Root_Gps) isRoot_Payload() {}

func (*Root_Compass) isRoot_Payload() {}

func (*Root_Lrf) isRoot_Payload() {}

func (*Root_LrfCalib) isRoot_Payload() {}

func (*Root_Rotary) isRoot_Payload() {}

func (*Root_Osd) isRoot_Payload() {}

func (*Root_Ping) isRoot_Payload() {}

func (*Root_Noop) isRoot_Payload() {}

func (*Root_Frozen) isRoot_Payload() {}

func (*Root_System) isRoot_Payload() {}

func (*Root_Cv) isRoot_Payload() {}

func (*Root_DayCamGlassHeater) isRoot_Payload() {}

func (*Root_Lira) isRoot_Payload() {}

type Ping struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Ping) Reset() {
	*x = Ping{}
	mi := &file_jon_shared_cmd_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ping) ProtoMessage() {}

func (x *Ping) ProtoReflect() protoreflect.Message {
	mi := &file_jon_shared_cmd_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ping.ProtoReflect.Descriptor instead.
func (*Ping) Descriptor() ([]byte, []int) {
	return file_jon_shared_cmd_proto_rawDescGZIP(), []int{1}
}

type Noop struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Noop) Reset() {
	*x = Noop{}
	mi := &file_jon_shared_cmd_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Noop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Noop) ProtoMessage() {}

func (x *Noop) ProtoReflect() protoreflect.Message {
	mi := &file_jon_shared_cmd_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Noop.ProtoReflect.Descriptor instead.
func (*Noop) Descriptor() ([]byte, []int) {
	return file_jon_shared_cmd_proto_rawDescGZIP(), []int{2}
}

type Frozen struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Frozen) Reset() {
	*x = Frozen{}
	mi := &file_jon_shared_cmd_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Frozen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Frozen) ProtoMessage() {}

func (x *Frozen) ProtoReflect() protoreflect.Message {
	mi := &file_jon_shared_cmd_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Frozen.ProtoReflect.Descriptor instead.
func (*Frozen) Descriptor() ([]byte, []int) {
	return file_jon_shared_cmd_proto_rawDescGZIP(), []int{3}
}

var File_jon_shared_cmd_proto protoreflect.FileDescriptor

const file_jon_shared_cmd_proto_rawDesc = "" +
	"\n" +
	"\x14jon_shared_cmd.proto\x12\x03cmd\x1a\x1bbuf/validate/validate.proto\x1a\x1cjon_shared_cmd_compass.proto\x1a\x18jon_shared_cmd_gps.proto\x1a\x18jon_shared_cmd_lrf.proto\x1a\x1fjon_shared_cmd_day_camera.proto\x1a jon_shared_cmd_heat_camera.proto\x1a\x1bjon_shared_cmd_rotary.proto\x1a\x18jon_shared_cmd_osd.proto\x1a\x1ejon_shared_cmd_lrf_align.proto\x1a\x1bjon_shared_cmd_system.proto\x1a\x17jon_shared_cmd_cv.proto\x1a)jon_shared_cmd_day_cam_glass_heater.proto\x1a\x19jon_shared_cmd_lira.proto\x1a\x1bjon_shared_data_types.proto\"\xa3\a\n" +
	"\x04Root\x128\n" +
	"\x10protocol_version\x18\x01 \x01(\rB\r\xbaH\n" +
	"*\b\x18\xff\xff\xff\xff\a \x00R\x0fprotocolVersion\x12\x1d\n" +
	"\n" +
	"session_id\x18\x02 \x01(\rR\tsessionId\x12\x1c\n" +
	"\timportant\x18\x03 \x01(\bR\timportant\x12*\n" +
	"\x11from_cv_subsystem\x18\x04 \x01(\bR\x0ffromCvSubsystem\x12F\n" +
	"\vclient_type\x18\x05 \x01(\x0e2\x19.ser.JonGuiDataClientTypeB\n" +
	"\xbaH\a\x82\x01\x04\x10\x01 \x00R\n" +
	"clientType\x124\n" +
	"\n" +
	"day_camera\x18\x14 \x01(\v2\x13.cmd.DayCamera.RootH\x00R\tdayCamera\x127\n" +
	"\vheat_camera\x18\x15 \x01(\v2\x14.cmd.HeatCamera.RootH\x00R\n" +
	"heatCamera\x12!\n" +
	"\x03gps\x18\x16 \x01(\v2\r.cmd.Gps.RootH\x00R\x03gps\x12-\n" +
	"\acompass\x18\x17 \x01(\v2\x11.cmd.Compass.RootH\x00R\acompass\x12!\n" +
	"\x03lrf\x18\x18 \x01(\v2\r.cmd.Lrf.RootH\x00R\x03lrf\x122\n" +
	"\tlrf_calib\x18\x19 \x01(\v2\x13.cmd.Lrf_calib.RootH\x00R\blrfCalib\x122\n" +
	"\x06rotary\x18\x1a \x01(\v2\x18.cmd.RotaryPlatform.RootH\x00R\x06rotary\x12!\n" +
	"\x03osd\x18\x1b \x01(\v2\r.cmd.OSD.RootH\x00R\x03osd\x12\x1f\n" +
	"\x04ping\x18\x1c \x01(\v2\t.cmd.PingH\x00R\x04ping\x12\x1f\n" +
	"\x04noop\x18\x1d \x01(\v2\t.cmd.NoopH\x00R\x04noop\x12%\n" +
	"\x06frozen\x18\x1e \x01(\v2\v.cmd.FrozenH\x00R\x06frozen\x12*\n" +
	"\x06system\x18\x1f \x01(\v2\x10.cmd.System.RootH\x00R\x06system\x12\x1e\n" +
	"\x02cv\x18  \x01(\v2\f.cmd.CV.RootH\x00R\x02cv\x12N\n" +
	"\x14day_cam_glass_heater\x18! \x01(\v2\x1b.cmd.DayCamGlassHeater.RootH\x00R\x11dayCamGlassHeater\x12$\n" +
	"\x04lira\x18\" \x01(\v2\x0e.cmd.Lira.RootH\x00R\x04liraB\x10\n" +
	"\apayload\x12\x05\xbaH\x02\b\x01J\x04\b\x06\x10\x14\"\x06\n" +
	"\x04Ping\"\x06\n" +
	"\x04Noop\"\b\n" +
	"\x06FrozenB\x8e\x01\n" +
	"\acom.cmdB\x11JonSharedCmdProtoP\x01ZDgit-codecommit.eu-central-1.amazonaws.com/v1/repos/jettison/jonp/cmd\xa2\x02\x03CXX\xaa\x02\x03Cmd\xca\x02\x03Cmd\xe2\x02\x0fCmd\\GPBMetadata\xea\x02\x03Cmdb\x06proto3"

var (
	file_jon_shared_cmd_proto_rawDescOnce sync.Once
	file_jon_shared_cmd_proto_rawDescData []byte
)

func file_jon_shared_cmd_proto_rawDescGZIP() []byte {
	file_jon_shared_cmd_proto_rawDescOnce.Do(func() {
		file_jon_shared_cmd_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_jon_shared_cmd_proto_rawDesc), len(file_jon_shared_cmd_proto_rawDesc)))
	})
	return file_jon_shared_cmd_proto_rawDescData
}

var file_jon_shared_cmd_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_jon_shared_cmd_proto_goTypes = []any{
	(*Root)(nil),                      // 0: cmd.Root
	(*Ping)(nil),                      // 1: cmd.Ping
	(*Noop)(nil),                      // 2: cmd.Noop
	(*Frozen)(nil),                    // 3: cmd.Frozen
	(types.JonGuiDataClientType)(0),   // 4: ser.JonGuiDataClientType
	(*day_camera.Root)(nil),           // 5: cmd.DayCamera.Root
	(*heat_camera.Root)(nil),          // 6: cmd.HeatCamera.Root
	(*gps.Root)(nil),                  // 7: cmd.Gps.Root
	(*compass.Root)(nil),              // 8: cmd.Compass.Root
	(*lrf.Root)(nil),                  // 9: cmd.Lrf.Root
	(*lrf_align.Root)(nil),            // 10: cmd.Lrf_calib.Root
	(*rotary.Root)(nil),               // 11: cmd.RotaryPlatform.Root
	(*osd.Root)(nil),                  // 12: cmd.OSD.Root
	(*system.Root)(nil),               // 13: cmd.System.Root
	(*cv.Root)(nil),                   // 14: cmd.CV.Root
	(*day_cam_glass_heater.Root)(nil), // 15: cmd.DayCamGlassHeater.Root
	(*lira.Root)(nil),                 // 16: cmd.Lira.Root
}
var file_jon_shared_cmd_proto_depIdxs = []int32{
	4,  // 0: cmd.Root.client_type:type_name -> ser.JonGuiDataClientType
	5,  // 1: cmd.Root.day_camera:type_name -> cmd.DayCamera.Root
	6,  // 2: cmd.Root.heat_camera:type_name -> cmd.HeatCamera.Root
	7,  // 3: cmd.Root.gps:type_name -> cmd.Gps.Root
	8,  // 4: cmd.Root.compass:type_name -> cmd.Compass.Root
	9,  // 5: cmd.Root.lrf:type_name -> cmd.Lrf.Root
	10, // 6: cmd.Root.lrf_calib:type_name -> cmd.Lrf_calib.Root
	11, // 7: cmd.Root.rotary:type_name -> cmd.RotaryPlatform.Root
	12, // 8: cmd.Root.osd:type_name -> cmd.OSD.Root
	1,  // 9: cmd.Root.ping:type_name -> cmd.Ping
	2,  // 10: cmd.Root.noop:type_name -> cmd.Noop
	3,  // 11: cmd.Root.frozen:type_name -> cmd.Frozen
	13, // 12: cmd.Root.system:type_name -> cmd.System.Root
	14, // 13: cmd.Root.cv:type_name -> cmd.CV.Root
	15, // 14: cmd.Root.day_cam_glass_heater:type_name -> cmd.DayCamGlassHeater.Root
	16, // 15: cmd.Root.lira:type_name -> cmd.Lira.Root
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_jon_shared_cmd_proto_init() }
func file_jon_shared_cmd_proto_init() {
	if File_jon_shared_cmd_proto != nil {
		return
	}
	file_jon_shared_cmd_proto_msgTypes[0].OneofWrappers = []any{
		(*Root_DayCamera)(nil),
		(*Root_HeatCamera)(nil),
		(*Root_Gps)(nil),
		(*Root_Compass)(nil),
		(*Root_Lrf)(nil),
		(*Root_LrfCalib)(nil),
		(*Root_Rotary)(nil),
		(*Root_Osd)(nil),
		(*Root_Ping)(nil),
		(*Root_Noop)(nil),
		(*Root_Frozen)(nil),
		(*Root_System)(nil),
		(*Root_Cv)(nil),
		(*Root_DayCamGlassHeater)(nil),
		(*Root_Lira)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_jon_shared_cmd_proto_rawDesc), len(file_jon_shared_cmd_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_jon_shared_cmd_proto_goTypes,
		DependencyIndexes: file_jon_shared_cmd_proto_depIdxs,
		MessageInfos:      file_jon_shared_cmd_proto_msgTypes,
	}.Build()
	File_jon_shared_cmd_proto = out.File
	file_jon_shared_cmd_proto_goTypes = nil
	file_jon_shared_cmd_proto_depIdxs = nil
}
