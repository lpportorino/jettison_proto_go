// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: jon_shared_cmd_day_cam_glass_heater.proto

package day_cam_glass_heater

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Root struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Cmd:
	//
	//	*Root_Start
	//	*Root_Stop
	//	*Root_TurnOn
	//	*Root_TurnOff
	//	*Root_GetMeteo
	Cmd           isRoot_Cmd `protobuf_oneof:"cmd"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Root) Reset() {
	*x = Root{}
	mi := &file_jon_shared_cmd_day_cam_glass_heater_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Root) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Root) ProtoMessage() {}

func (x *Root) ProtoReflect() protoreflect.Message {
	mi := &file_jon_shared_cmd_day_cam_glass_heater_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Root.ProtoReflect.Descriptor instead.
func (*Root) Descriptor() ([]byte, []int) {
	return file_jon_shared_cmd_day_cam_glass_heater_proto_rawDescGZIP(), []int{0}
}

func (x *Root) GetCmd() isRoot_Cmd {
	if x != nil {
		return x.Cmd
	}
	return nil
}

func (x *Root) GetStart() *Start {
	if x != nil {
		if x, ok := x.Cmd.(*Root_Start); ok {
			return x.Start
		}
	}
	return nil
}

func (x *Root) GetStop() *Stop {
	if x != nil {
		if x, ok := x.Cmd.(*Root_Stop); ok {
			return x.Stop
		}
	}
	return nil
}

func (x *Root) GetTurnOn() *TurnOn {
	if x != nil {
		if x, ok := x.Cmd.(*Root_TurnOn); ok {
			return x.TurnOn
		}
	}
	return nil
}

func (x *Root) GetTurnOff() *TurnOff {
	if x != nil {
		if x, ok := x.Cmd.(*Root_TurnOff); ok {
			return x.TurnOff
		}
	}
	return nil
}

func (x *Root) GetGetMeteo() *GetMeteo {
	if x != nil {
		if x, ok := x.Cmd.(*Root_GetMeteo); ok {
			return x.GetMeteo
		}
	}
	return nil
}

type isRoot_Cmd interface {
	isRoot_Cmd()
}

type Root_Start struct {
	Start *Start `protobuf:"bytes,1,opt,name=start,proto3,oneof"`
}

type Root_Stop struct {
	Stop *Stop `protobuf:"bytes,2,opt,name=stop,proto3,oneof"`
}

type Root_TurnOn struct {
	TurnOn *TurnOn `protobuf:"bytes,3,opt,name=turn_on,json=turnOn,proto3,oneof"`
}

type Root_TurnOff struct {
	TurnOff *TurnOff `protobuf:"bytes,4,opt,name=turn_off,json=turnOff,proto3,oneof"`
}

type Root_GetMeteo struct {
	GetMeteo *GetMeteo `protobuf:"bytes,5,opt,name=get_meteo,json=getMeteo,proto3,oneof"`
}

func (*Root_Start) isRoot_Cmd() {}

func (*Root_Stop) isRoot_Cmd() {}

func (*Root_TurnOn) isRoot_Cmd() {}

func (*Root_TurnOff) isRoot_Cmd() {}

func (*Root_GetMeteo) isRoot_Cmd() {}

type Start struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Start) Reset() {
	*x = Start{}
	mi := &file_jon_shared_cmd_day_cam_glass_heater_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Start) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Start) ProtoMessage() {}

func (x *Start) ProtoReflect() protoreflect.Message {
	mi := &file_jon_shared_cmd_day_cam_glass_heater_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Start.ProtoReflect.Descriptor instead.
func (*Start) Descriptor() ([]byte, []int) {
	return file_jon_shared_cmd_day_cam_glass_heater_proto_rawDescGZIP(), []int{1}
}

type Stop struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Stop) Reset() {
	*x = Stop{}
	mi := &file_jon_shared_cmd_day_cam_glass_heater_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Stop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stop) ProtoMessage() {}

func (x *Stop) ProtoReflect() protoreflect.Message {
	mi := &file_jon_shared_cmd_day_cam_glass_heater_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stop.ProtoReflect.Descriptor instead.
func (*Stop) Descriptor() ([]byte, []int) {
	return file_jon_shared_cmd_day_cam_glass_heater_proto_rawDescGZIP(), []int{2}
}

type TurnOn struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TurnOn) Reset() {
	*x = TurnOn{}
	mi := &file_jon_shared_cmd_day_cam_glass_heater_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TurnOn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TurnOn) ProtoMessage() {}

func (x *TurnOn) ProtoReflect() protoreflect.Message {
	mi := &file_jon_shared_cmd_day_cam_glass_heater_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TurnOn.ProtoReflect.Descriptor instead.
func (*TurnOn) Descriptor() ([]byte, []int) {
	return file_jon_shared_cmd_day_cam_glass_heater_proto_rawDescGZIP(), []int{3}
}

type TurnOff struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TurnOff) Reset() {
	*x = TurnOff{}
	mi := &file_jon_shared_cmd_day_cam_glass_heater_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TurnOff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TurnOff) ProtoMessage() {}

func (x *TurnOff) ProtoReflect() protoreflect.Message {
	mi := &file_jon_shared_cmd_day_cam_glass_heater_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TurnOff.ProtoReflect.Descriptor instead.
func (*TurnOff) Descriptor() ([]byte, []int) {
	return file_jon_shared_cmd_day_cam_glass_heater_proto_rawDescGZIP(), []int{4}
}

type GetMeteo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMeteo) Reset() {
	*x = GetMeteo{}
	mi := &file_jon_shared_cmd_day_cam_glass_heater_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMeteo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMeteo) ProtoMessage() {}

func (x *GetMeteo) ProtoReflect() protoreflect.Message {
	mi := &file_jon_shared_cmd_day_cam_glass_heater_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMeteo.ProtoReflect.Descriptor instead.
func (*GetMeteo) Descriptor() ([]byte, []int) {
	return file_jon_shared_cmd_day_cam_glass_heater_proto_rawDescGZIP(), []int{5}
}

var File_jon_shared_cmd_day_cam_glass_heater_proto protoreflect.FileDescriptor

const file_jon_shared_cmd_day_cam_glass_heater_proto_rawDesc = "" +
	"\n" +
	")jon_shared_cmd_day_cam_glass_heater.proto\x12\x15cmd.DayCamGlassHeater\x1a\x1bbuf/validate/validate.proto\"\xb4\x02\n" +
	"\x04Root\x124\n" +
	"\x05start\x18\x01 \x01(\v2\x1c.cmd.DayCamGlassHeater.StartH\x00R\x05start\x121\n" +
	"\x04stop\x18\x02 \x01(\v2\x1b.cmd.DayCamGlassHeater.StopH\x00R\x04stop\x128\n" +
	"\aturn_on\x18\x03 \x01(\v2\x1d.cmd.DayCamGlassHeater.TurnOnH\x00R\x06turnOn\x12;\n" +
	"\bturn_off\x18\x04 \x01(\v2\x1e.cmd.DayCamGlassHeater.TurnOffH\x00R\aturnOff\x12>\n" +
	"\tget_meteo\x18\x05 \x01(\v2\x1f.cmd.DayCamGlassHeater.GetMeteoH\x00R\bgetMeteoB\f\n" +
	"\x03cmd\x12\x05\xbaH\x02\b\x01\"\a\n" +
	"\x05Start\"\x06\n" +
	"\x04Stop\"\b\n" +
	"\x06TurnOn\"\t\n" +
	"\aTurnOff\"\n" +
	"\n" +
	"\bGetMeteoB\x8f\x02\n" +
	"\x19com.cmd.DayCamGlassHeaterB\"JonSharedCmdDayCamGlassHeaterProtoP\x01ZYgit-codecommit.eu-central-1.amazonaws.com/v1/repos/jettison/jonp/cmd/day_cam_glass_heater\xa2\x02\x03CDX\xaa\x02\x15Cmd.DayCamGlassHeater\xca\x02\x15Cmd\\DayCamGlassHeater\xe2\x02!Cmd\\DayCamGlassHeater\\GPBMetadata\xea\x02\x16Cmd::DayCamGlassHeaterb\x06proto3"

var (
	file_jon_shared_cmd_day_cam_glass_heater_proto_rawDescOnce sync.Once
	file_jon_shared_cmd_day_cam_glass_heater_proto_rawDescData []byte
)

func file_jon_shared_cmd_day_cam_glass_heater_proto_rawDescGZIP() []byte {
	file_jon_shared_cmd_day_cam_glass_heater_proto_rawDescOnce.Do(func() {
		file_jon_shared_cmd_day_cam_glass_heater_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_jon_shared_cmd_day_cam_glass_heater_proto_rawDesc), len(file_jon_shared_cmd_day_cam_glass_heater_proto_rawDesc)))
	})
	return file_jon_shared_cmd_day_cam_glass_heater_proto_rawDescData
}

var file_jon_shared_cmd_day_cam_glass_heater_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_jon_shared_cmd_day_cam_glass_heater_proto_goTypes = []any{
	(*Root)(nil),     // 0: cmd.DayCamGlassHeater.Root
	(*Start)(nil),    // 1: cmd.DayCamGlassHeater.Start
	(*Stop)(nil),     // 2: cmd.DayCamGlassHeater.Stop
	(*TurnOn)(nil),   // 3: cmd.DayCamGlassHeater.TurnOn
	(*TurnOff)(nil),  // 4: cmd.DayCamGlassHeater.TurnOff
	(*GetMeteo)(nil), // 5: cmd.DayCamGlassHeater.GetMeteo
}
var file_jon_shared_cmd_day_cam_glass_heater_proto_depIdxs = []int32{
	1, // 0: cmd.DayCamGlassHeater.Root.start:type_name -> cmd.DayCamGlassHeater.Start
	2, // 1: cmd.DayCamGlassHeater.Root.stop:type_name -> cmd.DayCamGlassHeater.Stop
	3, // 2: cmd.DayCamGlassHeater.Root.turn_on:type_name -> cmd.DayCamGlassHeater.TurnOn
	4, // 3: cmd.DayCamGlassHeater.Root.turn_off:type_name -> cmd.DayCamGlassHeater.TurnOff
	5, // 4: cmd.DayCamGlassHeater.Root.get_meteo:type_name -> cmd.DayCamGlassHeater.GetMeteo
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_jon_shared_cmd_day_cam_glass_heater_proto_init() }
func file_jon_shared_cmd_day_cam_glass_heater_proto_init() {
	if File_jon_shared_cmd_day_cam_glass_heater_proto != nil {
		return
	}
	file_jon_shared_cmd_day_cam_glass_heater_proto_msgTypes[0].OneofWrappers = []any{
		(*Root_Start)(nil),
		(*Root_Stop)(nil),
		(*Root_TurnOn)(nil),
		(*Root_TurnOff)(nil),
		(*Root_GetMeteo)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_jon_shared_cmd_day_cam_glass_heater_proto_rawDesc), len(file_jon_shared_cmd_day_cam_glass_heater_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_jon_shared_cmd_day_cam_glass_heater_proto_goTypes,
		DependencyIndexes: file_jon_shared_cmd_day_cam_glass_heater_proto_depIdxs,
		MessageInfos:      file_jon_shared_cmd_day_cam_glass_heater_proto_msgTypes,
	}.Build()
	File_jon_shared_cmd_day_cam_glass_heater_proto = out.File
	file_jon_shared_cmd_day_cam_glass_heater_proto_goTypes = nil
	file_jon_shared_cmd_day_cam_glass_heater_proto_depIdxs = nil
}
